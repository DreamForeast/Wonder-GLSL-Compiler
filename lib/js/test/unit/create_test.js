// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs          = require("fs");
var Curry       = require("bs-platform/lib/js/curry.js");
var Sinon       = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1     = require("sinon");
var Create      = require("../../src/create.js");
var StringTool  = require("./stringTool.js");
var Wonder_jest = require("wonder-bs-jest/lib/js/src/wonder_jest.js");

describe("create shunk system file", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var destFilePath = ["./shaderChunkSystem.re"];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                if (Fs.existsSync(destFilePath[0])) {
                  Fs.unlinkSync(destFilePath[0]);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              }));
        Wonder_jest.test("add private functions", (function () {
                Create.createShunkSystemFile(/* array */[], destFilePath[0], (function () {
                        return /* () */0;
                      }));
                return Wonder_jest.Expect[/* toContainString */11](StringTool.removeBlankNewLine("\nopen ShaderChunkType;\n\nlet _getGLSLChunkMap = (state) => state.glslChunkRecord.chunkMap;\n\nlet getChunk = (name: string, state) =>\n  state |> _getGLSLChunkMap |> WonderCommonlib.HashMapSystem.get(name) |> Js.Option.getExn;\n\nlet _buildChunk =\n    (\n      (top: string,\n      define: string),\n      varDeclare: string,\n      (funcDeclare: string,\n      funcDefine: string),\n      body: string\n    ) => {\n  top,\n  define,\n  varDeclare,\n  funcDeclare,\n  funcDefine,\n  body\n};\n"))(Wonder_jest.Expect[/* expect */0](StringTool.removeBlankNewLine(Fs.readFileSync(destFilePath[0], "utf8"))));
              }));
        Wonder_jest.test("test parsed glsl content", (function () {
                Create.createShunkSystemFile(/* array */[
                      "./test/res/glsl1.glsl",
                      "./test/res/glsl2.glsl"
                    ], destFilePath[0], (function () {
                        return /* () */0;
                      }));
                return Wonder_jest.Expect[/* toContainString */11](StringTool.removeBlankNewLine("|> set(\"glsl2\", _buildChunk({||},{|define B 2;|},{|varying vec2 v_mapCoord2;|},{|vec3 func2(vec3 lightPos);|},{|vec3 func2(vec3 lightPos){\n                       return vec3(0.5);\n                   }|},{|gl_FragColor = vec4(1.0,0.5,1.0,1.0);|}))\n                |> set(\"glsl1\", let_buildChunk=((top:string,define:string),varDeclare:string,(funcDeclare:string,funcDefine:string),body:string)=>{top,define,varDeclare,funcDeclare,funcDefine,body};,{|vec3 func2(vec3 lightPos){\n                       return vec3(0.5);\n                   }\n                   vec3 func1(vec3 lightPos){\n                       return vec3(1.0);\n                   }|},{|gl_Position = u_pMatrix * u_vMatrix * mMatrix * vec4(a_position, 1.0);|}))"))(Wonder_jest.Expect[/* expect */0](StringTool.removeBlankNewLine(Fs.readFileSync(destFilePath[0], "utf8"))));
              }));
        Wonder_jest.test("exec done func", (function () {
                var done_ = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                Create.createShunkSystemFile(/* array */["./test/res/glsl2.glsl"], destFilePath[0], done_);
                Fs.readFileSync(destFilePath[0], "utf8");
                return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](done_));
              }));
        return Wonder_jest.test("support pass glob path array", (function () {
                      var done_ = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                      Create.createShunkSystemFile(/* array */["./test/res/glsl*"], destFilePath[0], done_);
                      var content = StringTool.removeBlankNewLine(Fs.readFileSync(destFilePath[0], "utf8"));
                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                      +content.includes("glsl1"),
                                      +content.includes("glsl2")
                                    ]), /* tuple */[
                                  /* true */1,
                                  /* true */1
                                ]);
                    }));
      }));

/*  Not a pure module */
